Certainly! Here is the source code extracted from the provided document:

```python
#!/usr/bin/env python
# coding: utf-8

# # Package Installation

# In[1]:


get_ipython().system('pip3 install matplotlib')
get_ipython().system('pip3 install numpy')
get_ipython().system('pip3 install pandas')
get_ipython().system('pip3 install keras==2.3.1')
get_ipython().system('pip3 install tensorflow==2.1.0')
get_ipython().system('pip3 install scikit-learn==0.24.0')


# # Import the Packages

# In[ ]:


import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from keras import backend as K
from keras.layers import Dense, Activation, LSTM, Dropout
from keras.models import Sequential, load_model
from keras.utils import to_categorical  # Updated import statement
from keras.utils.generic_utils import get_custom_objects
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split


# # Import the Dataset

# In[1]:


raw_data = pd.read_csv(r'C:\Users\nielit\Downloads\data.csv')


# # Split Dataset into Training Set and Test Set

# In[9]:


perc = 90
# Set for training the model
data = raw_data.head(int(len(raw_data) * (perc / 100)))
# Set for testing the model later to get the real accuracy
test_set = raw_data.tail(int(len(raw_data) * ((100 - perc) / 100)))


# In[11]:


from sklearn.model_selection import train_test_split


# In[12]:


from sklearn.model_selection import train_test_split


# In[14]:


get_ipython().system('pip3 install matplotlib')
get_ipython().system('pip3 install numpy')
get_ipython().system('pip3 install pandas')
get_ipython().system('pip3 install keras==2.3.1')
get_ipython().system('pip3 install tensorflow==2.1.0')
get_ipython().system('pip3 install scikit-learn==0.24.0')


# In[ ]:


import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from keras import backend as K
from keras.layers import Dense, Activation, LSTM, Dropout, Conv1D, MaxPooling1D, Flatten
from keras.models import Sequential, load_model
from keras.utils import to_categorical  # Corrected import
from keras.utils.generic_utils import get_custom_objects
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split


# In[16]:


raw_data = pd.read_csv(r'C:\Users\nielit\Downloads\data.csv')


# In[17]:


raw_data.head()


# In[18]:


# Percentage to split by for training
perc = 90
# Set for training the model
data = raw_data.head(int(len(raw_data) * (perc / 100)))
# Set for testing the model later to get the real accuracy
test_set = raw_data.tail(int(len(raw_data) * ((100 - perc) / 100)))


# # Format the Data

# In[19]:


x_values = data.values[:, 1:-1]
y_values = np.array(data['y'])
y_values = to_categorical(y_values)  
x_train, x_test, y_train, y_test = train_test_split(x_values, y_values, test_size=0.2, random_state=1)
x_train = x_train.reshape(-1, 178, 1)
x_test = x_test.reshape(-1, 178, 1)
print(
    "X Train: {}\nX Test: {}\nY Train: {}\nY Test {}".format(x_train.shape, x_test.shape, y_train.shape, y_test.shape))


# # Visualize the Dataset

# In[20]:


plt.figure(figsize=(12, 8))
# Plot data labeled 1 - Seizure
plt.plot(x_values[1, :], label="1 - Seizure")
# Plot data labeled 2 - No Seizure
plt.plot(x_values[7, :], label="2 - No Seizure")
# Plot data labeled 3 - No Seizure
plt.plot(x_values[12, :], label="3 - No Seizure")
# Plot data labeled 4 - No Seizure
plt.plot(x_values[0, :], label="4 - No Seizure")
# Plot data labeled 5 - No Seizure
plt.plot(x_values[2, :], label="5 - No Seizure")
# Create a legend and output the graph
plt.legend()
plt.show()


# In[ ]:


from keras.utils import get_custom_objects


# # Model Training - Create a Custom Activation Function

# In[ ]:


def custom_activation(x, beta=2):
    """
    Define Swish Activation Function
    """
    return K.sigmoid(beta * x) * x


get_custom_objects().update({'custom_activation': Activation(custom_activation)})


# # Create a LSTM Model

# In[26]:


model = Sequential()
model.add(LSTM(56, input_shape=(45, 1), return_sequences=True))
model.add(Dropout(0.3))
model.add(LSTM(56))
model.add(Dropout(0.3))
model.add(Dense(20))


# In[27]:


model.add(Activation('tanh'))
model.add(Dense(5))
model.add(Activation('softmax'))


# # Output the model summary

# In[28]:


model.summary()


# # Define the variables for training

# In[29]:


model.compile(
    loss="binary_crossentropy",
    optimizer="adam",
    metrics=["accuracy"]
)


# In[31]:


import tensorflow as tf
from keras.models import Sequential, load_model
from keras.utils import to_categorical
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split


# In[32]:


x_train_tensor = tf.convert_t o_tensor((x_train[:, ::4] - x_train.mean()) / x_train.std(), dtype=tf.float32)
y_train_tensor = tf.convert_to_tensor(y_train[:, 1:], dtype=tf.float32)

x_test_tensor = tf.convert_to_tensor((x_test[:, ::4] - x_test.mean()) / x_test.std(), dtype=tf.float32)
y_test_tensor = tf.convert_to_tensor(y_test[:, 1:], dtype=tf.float32)


# # Train the LSTM Model

# In[33]:


hist = model.fit(
    x=x_train_tensor,
    y=y_train_tensor,
    validation_data=(x_test_tensor, y_test_tensor),
    epochs=100,
    batch_size=15,
    shuffle=True
)


# # Save the Model

# In[34]:


model_name = "Seizure_Detector.h5"
model.save(model_name)


# # Visualize Model's Accuracy Metrics

# In[35]:


plt.figure(0)
plt.plot(hist.history['loss'], 'green')
plt.plot(hist.history['accuracy'], 'red')
plt.show()


# # Plot Validation Loss and Accuracy of the Model

# In[36]:


plt.figure(0)
plt.plot(hist.history['val_loss'], 'blue')
plt.plot(hist.history['val_accuracy'], 'black')
plt.show()


# In[37]:


model = load_model(model_name)


# # Split the Test Set

# In[38]:


x_test
